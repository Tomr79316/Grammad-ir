#!/bin/bash
# @configure_input@
# This is the front-end to An Gramadóir, an Irish language grammar checker.
# Copyright (C) 2003 Kevin P. Scannell <scannell@slu.edu>
#
# This is free software; see the file COPYING for copying conditions.  There is
# NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Usage: gr [--help] [--version] [--html] [--xml] [--litriu] [FILES]
#
# This is a script for checking the grammar of Irish language text
# contained in the files specified on the command line, or read from
# standard input if no arguments are given.   The default behavior is
# to write a summary of possible errors to standard output.   
#
# There are several command line options.  The --html command line argument
# produces HTML output which should resemble the terminal output when
# viewed in a standard web brower.  The --litriu argument tells gr to
# act like classical UNIX "spell" (or ispell -l), and the --xml argument
# writes the intermediate tagged XML stream to standard output for 
# development or debugging purposes.   The standard GNU --version and
# --help options work in the expected way.

CLAR='An Gramadóir'        # title that prints to screen, not used as filename

# i18n strings; use gettext eventually
checking='Ag seiceáil'
notfound='ní a leithéid de chomhad ann'
isdir='is comhadlann í'
permissions='cead diúltaithe'
usage="Úsáid: gr [--help] [--version] [--html] [--xml] [--litriu] [COMHAID]"
stdinhelp="Mura bhfuil comhad ann, léigh ón ionchur caighdeánach"
bugreports="Seol tuairiscí fabhtanna chuig <@PACKAGE_BUGREPORT@>."
versionstring="leagan @PACKAGE_VERSION@"
gpl1="Is saorbhogearra an ríomhchlár seo; féach ar an bhunchód le haghaidh"
gpl2="coinníollacha cóipeála.  Níl baránta AR BITH ann; go fiú níl baránta ann"
gpl3="d'INDÍOLTACHT nó FEILIÚNACHT DO FHEIDHM AR LEITH, an oiread atá ceadaithe"
gpl4="de réir dlí."

TAB=`@AWK@ 'BEGIN{printf "\t";}'`

# i18n: grammatical errors.  See rialacha.in.
loganu()
{
sed "
s/\"ANAITHNID/\"Focal anaithnid/g
/BACHOIR/s/_/ /g
s/\"BACHOIR{\([^}]*\)}/\"Ba chóir duit \/\1\/ a úsáid anseo/g
s/\"CLAOCHLU/\"Seimhiú nó urú ar iarraidh/g
s/\"NISEIMHIU/\"Seimhiú gan ghá/g
s/\"PREFIXH/\"Réamhlitir \/h\/ ar iarraidh/g
s/\"PREFIXT/\"Réamhlitir \/t\/ ar iarraidh/g
s/\"SEIMHIU/\"Seimhiú ar iarraidh/g
s/\"URU/\"Urú ar iarraidh/g
"
}

# this is what happens if --version is passed
versionout()
{
echo "${CLAR}, ${versionstring}"
echo "Copyright (C) 2003 Kevin P. Scannell"
echo ${gpl1}
echo ${gpl2}
echo ${gpl3}
echo ${gpl4}
}

# this is what happens if --help is passed
helpout()
{
echo "${usage}"
echo "${stdinhelp}"
echo
echo "${bugreports}"
}


# This function is intended to convert a utf-8 stream into ISO-8859-1.  I'm 
# assuming the input stream contains Irish text.  This is reasonable because 
# the actual grammar checking will be a terrible mess otherwise. 
diutf()
{
tr -d "\303" | tr "[\200-\277]" "[\300-\377]"
}

# strips any pre-existing markup, tokenizes with <c></c>,
# inserts line number markup, puts one sentence per line 
# final filter is there because of some indecision about
# whether I like the line number markups on the interiors of lines
abairti()
{
egrep -n '^' | sed "
		s/<[^>]*>//g; 
		s/&//g; 
		s/[A-Za-záéíóúÁÉÍÓÚ][A-Za-záéíóúÁÉÍÓÚ-]*/<c>&<\/c>/g; 
		s/\(--*\)<\/c>/<\/c>\1/g;
		s/<c>\([BDMbdm]\)<\/c>'<c>/<c>\1'/g;
		s/<c>\([Mm]b\)<\/c>'<c>/<c>\1'/g;
		s/^\([1-9][0-9]*\):/<line uimhir=\"\1\"> /; 
		s/\([^.][^.][^.][.?!][]\"\')}]*\) [ ${TAB}\n]*/\1 <\/line>\n/g;
		s/[^.][^.][^.][.?!][]\"\')}]*$/& <\/line>/" |
		athuimhir | athcheang |
		sed 's/\(.\)<line uimhir[^>]*>/\1/g'
}

# helper for abairti.  If a sentence starts in the middle of a line,
# need the line number tag to propagate down to the beginning of this
# sentence.  Thus, the first chunk below stores the line number markup 
# in hold space and the second chunk retrieves it and inserts at beginning
#  n.b. POSIX sed requires no whitespace after the "!" in the negated 
#  match below.    Discovered while porting to an old DEC machine.
athuimhir()
{
sed '
/^<line uimhir=/ {
h
s/^\(<line uimhir=\"[1-9][0-9]*\">\).*$/\1/
x
}

/^<line uimhir=/!{
G
s/^\(.*\)\n\(<line uimhir=\"[1-9][0-9]*\">\)$/\2 \1/
}

/^<line uimhir=\"[1-9][0-9]*\"> *$/d
'
}

# helper for abairti.  This is the "complement" to athuimhir, for when
# a sentence spans across lines.   It needs to be "rejoined" (athcheangailte).
# onto a single line.
athcheang()
{
sed "
/<\/line>$/ {
H
s/^.*$//
x
s/\n//g
s/[ ${TAB}][ ${TAB}]*/ /g
}

/<\/line>$/!{
H
d
}
"
}


# This is a filter which takes the markup generated by 
# looking up words in the dictionary and tries to resolve
# any ambiguties by looking at local context.
#
#  It is a sequence of sed replacements which are discovered
#  inductively by looking at examples of ambiguities in real
#  Irish texts.  It is important to order the replacements
#  according to their "confidence level"; while it is clear
#  that...     distinguishing between ...  is sometimes much harder.
aonchiall()
{
@PERL@ @prefix@/libexec/aonchiall.pl
}

# This is the workhorse.  It does the actually marking up of errors.
rialacha()
{
@PERL@ @prefix@/libexec/rialacha.pl
}

# This strips off errors from exceptions to rules
eisceacht()
{
@PERL@ @prefix@/libexec/eisceacht.pl
}

# This is the final filter used by the "gr" program.
# It generates a Bourne shell script which produces the
# final output.  It is the part I like the least and 
# users should feel free to replace it with their own
# front ends.
comheadan()
{
sed -n '
/<E/ {
h
s/^<line uimhir=\"\([1-9][0-9]*\)\">/echo "\1:/
s/<[^>]*>//g
s/\(["$`]\)/\\\1/g
s/^echo \\"/echo "/
s/$/" | myaibhsigh"(/
G
x
s/<[^E][^>]*>//g
s/^[^<]*</</
s/>[^<]*</></g
s/>[^<]*$/>/
s/<E[^>]*msg=\"\([^"]*\)\"[^>]*>/"\1," /g
s/^/echo /
s/,\" $/."; echo/
x
s/<[^E\/][^>]*>//g
s/<\/[^E][^>]*>//g
s/\n[^<]*</</
s/>[^<]*$/>/
s/<\/E>[^<]*<E/<\/E><E/g
s/<E[^>]*>\([^<]*\)<\/E>/\1|/g
s/<[^>]*>//g
s/|$/)"/
G
p
}
'
}

# does the error messaging and returns the boolean 
drochchomhad()
{
	if [ ! -e ${1} ]
	then
		echo "${CLAR}: ${1}: $notfound"
	else
		if [ -d ${1} ]
		then
			echo "${CLAR}: ${1}: $isdir" > 2
		else
			if [ ! -r ${1} ]
			then
				echo "${CLAR}: ${1}: $permissions" > 2
			fi
		fi
	fi
	[ ! -e ${1} ] || [ -d ${1} ] || [ ! -r ${1} ]    # return value
}

# This is the main sequence of filters for checking a given file
# Either $1 is empty (stdin) or, if not, we've checked
# it exists, is not a directory, and is readable
comhad()
{
	cat $1 | diutf | 
		abairti |
		@prefix@/libexec/cuardach |
		aonchiall |
		rialacha |
		eisceacht |
		comheadan |
		@AWK@ "{sub(/myaibhsigh/,\"${AIBHSIGHVAR}\"); print}" | 
		loganu |
		/bin/bash -s
}

# same as filters in comhad up to the interface
xml_output()
{
	cat $1 | diutf | 
		abairti |
		@prefix@/libexec/cuardach |
		aonchiall |
		rialacha |
		eisceacht
}

litriu_comheadan()
{
sed -n "
/<X>/{
s/<[^X\/][^>]*>//g
s/<\/[^X][^>]*>//g
s/^[^<]*<X>//
s/<\/X>[^<]*$//
s/<\/X>[^<]*<X>/\n/g
p
}
"
}

litriu()
{
	cat $1 | diutf | 
		abairti |
		@prefix@/libexec/cuardach |
		litriu_comheadan
}

# remainder is the "main()"

AIBHSIGHVAR="@EGREP_COLOR@ "
ACTION=comhad
while [ ${1%%[^-]*} ]
do
	if [ ${1} = "--version" ]
	then
		versionout
		exit 0
	fi

	if [ ${1} = "--help" ]
	then
		helpout
		exit 0
	fi

	if [ ${1} = "--html" ]
	then
		AIBHSIGHVAR="@AWK@ -f @prefix@/libexec/hilite.awk pattern="
	fi

	if [ ${1} = "--litriu" ]
	then
		ACTION=litriu
	fi

	if [ ${1} = "--xml" ]
	then
		ACTION=xml_output
	fi
	shift
done

if [ -z "${1}" ]
then
	${ACTION}
else
	until [ -z "$1" ]
	do
		if ! drochchomhad ${1}
		then
			if [ ${ACTION} = "comhad" ]
			then
				echo $checking ${1}
			fi
			${ACTION} ${1}
		fi	
		shift
	done
fi
exit 0
