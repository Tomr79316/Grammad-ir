#!/bin/bash
# @configure_input@
# This is the front-end to An Gramadóir, an Irish language grammar checker.
# Copyright (C) 2003 Kevin P. Scannell <scannell@slu.edu>
#
# This is free software; see the file COPYING for copying conditions.  There is
# NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Usage: gr [OPTIONS] [FILES]
#
# This is a script for checking the grammar of Irish language text
# contained in the files specified on the command line, or read from
# standard input if no arguments are given.   The default behavior is
# to write a summary of possible errors to standard output.
#
# There are several command line options.  See the web page
# http://borel.slu.edu/gramadoir/
# for a description of these, or use "gr --help"

# NOT internationalized
PACKAGE_NAME="@PACKAGE_NAME@"
packageversion="@PACKAGE_VERSION@"
bugemail="@PACKAGE_BUGREPORT@"
TEXTDOMAINDIR="@prefix@/share/locale"
TEXTDOMAIN="${PACKAGE_NAME}"
TEANGACHA="@TEANGACHA@"
DATADIR="@prefix@/share/${PACKAGE_NAME}"
export TEXTDOMAINDIR TEXTDOMAIN

EXECUTABLE="${0##/*/}"
HELPCOMMAND="${EXECUTABLE} --help"

# All i18n strings collected here.  See gramadoir.pot for some 
# translation hints.
CLAR=`@SH_GETTEXT@ "An Gramadoir"`
checking=`@SH_GETTEXT@ "Currently checking %s"`
notfound=`@SH_GETTEXT@ "There is no such file."`
isdir=`@SH_GETTEXT@ "Is a directory"`
permissions=`@SH_GETTEXT@ "Permission denied"`
usage1=`@SH_GETTEXT@ "Usage: %s [OPTIONS] [FILES]"`
usage2=`@SH_GETTEXT@ "    --litriu       write misspelled words to standard output"`
usage3=`@SH_GETTEXT@ "    --html         produce HTML output for viewing in a web browser"`
usage4=`@SH_GETTEXT@ "    --xml          write tagged XML stream to standard output, for debugging"`
usage5=`@SH_GETTEXT@ "    --iomlan       report all errors (i.e. do not use ~/.neamhshuim)"`
usage8=`@SH_GETTEXT@ "    --teanga=XX    specify the language of the text to be checked (default=ga)"`
usage9=`@SH_GETTEXT@ "    --ionchod=ENC  specify the character encoding of the text to be checked"`
usage6=`@SH_GETTEXT@ "    --help         display this help and exit"`
usage7=`@SH_GETTEXT@ "    --version      output version information and exit"`
stdinhelp=`@SH_GETTEXT@ "If no file is given, read from standard input."`
bugreports=`@SH_GETTEXT@ "Send bug reports to <%s>."`
versionstring=`@SH_GETTEXT@ "version %s"`
gpl=`@SH_GETTEXT@ "This is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE,\nto the extent permitted by law."`
tryhelp=`@SH_GETTEXT@ "Try %s for more information."`
unknownopt=`@SH_GETTEXT@ "unrecognized option %s"`
missingarg=`@SH_GETTEXT@ "option %s requires an argument"`
unwanted=`@SH_GETTEXT@ "option %s does not allow an argument"`
unsupported=`@SH_GETTEXT@ "Language %s is not supported."`
ANAITHNIDSRL=`@SH_GETTEXT@ "Unknown word (ignoring remainder in this sentence)"`
ANAITHNID=`@SH_GETTEXT@ "Unknown word"`
BACHOIR=`@SH_GETTEXT@ "You should use \/\1\/ here instead"`
CAIGHDEAN=`@SH_GETTEXT@ "Non-standard form: perhaps use \/\1\/?"`
CLAOCHLU=`@SH_GETTEXT@ "Initial mutation missing"`
NISEIMHIU=`@SH_GETTEXT@ "Unnecessary lenition"`
PREFIXH=`@SH_GETTEXT@ "Prefix \/h\/ missing"`
PREFIXT=`@SH_GETTEXT@ "Prefix \/t\/ missing"`
SEIMHIU=`@SH_GETTEXT@ "Lenition missing"`
URU=`@SH_GETTEXT@ "Eclipsis missing"`

# i18n: grammatical errors.  See rialacha-*.in.
# If you port to another language, you won't translate these; instead
# they will be replaced completely with messages corresponding to
# the errors for your language.
loganu()
{
sed "
s/\"ANAITHNIDSRL/\"${ANAITHNIDSRL}/g
s/\"ANAITHNID/\"${ANAITHNID}/g
s/\"BACHOIR{\([^}]*\)}/\"${BACHOIR}/g
/CAIGHDEAN/s/_/ /g
s/\"CAIGHDEAN{\([^}]*\)}/\"${CAIGHDEAN}/g
s/\"CLAOCHLU/\"${CLAOCHLU}/g
s/\"NISEIMHIU/\"${NISEIMHIU}/g
s/\"PREFIXH/\"${PREFIXH}/g
s/\"PREFIXT/\"${PREFIXT}/g
s/\"SEIMHIU/\"${SEIMHIU}/g
s/\"URU/\"${URU}/g
"
}

TAB=`@AWK@ 'BEGIN{printf "\t";}'`

# this is what happens if --version is passed
# Do not translate "Copyright" per the GNU coding standards.
versionout()
{
printf "${CLAR}, ${versionstring}\n" "${packageversion}"
echo "Copyright (C) 2003 Kevin P. Scannell"
printf "${gpl}\n"
}

htmlversion()
{
echo "<p>"
printf "<a href=\"http://borel.slu.edu/gramadoir/\">${CLAR}</a>, ${versionstring}<br>\n" "${packageversion}"
echo "Cóipcheart/Copyright (C) 2003 <a href=\"http://borel.slu.edu/\">Kevin P. Scannell</a><br><br>"
echo "<i>"
printf "${gpl}\n"
echo "</i></p><hr>"
}

# this is what happens if --help is passed
helpout()
{
printf "${usage1}\n" "${EXECUTABLE}"
echo
echo "${usage2}"
echo "${usage3}"
echo "${usage4}"
echo "${usage5}"
echo "${usage8}"
echo "${usage9}"
echo "${usage6}"
echo "${usage7}"
echo
echo "${stdinhelp}"
echo
printf "${bugreports}\n" "${bugemail}"
}

# one argument, the erroneous option passed
option_error()
{
printf "${CLAR}: ${unknownopt}\n" "${1}"
printf "${tryhelp}\n" "${HELPCOMMAND}"
}

# one argument, the erroneous option passed
no_argument()
{
printf "${CLAR}: ${missingarg}\n" "${1}"
printf "${tryhelp}\n" "${HELPCOMMAND}"
}

# one argument, the erroneous option passed
unwanted_arg()
{
printf "${CLAR}: ${unwanted}\n" "${1}"
printf "${tryhelp}\n" "${HELPCOMMAND}"
}


# This function used to simply convert a utf-8 stream into ISO-8859-1,
# hence the name.  It has now been generalized to use GNU libc "iconv"
# to do all conversions of character encodings.
diutf()
{
if [ "${IONCHOD}" != "${NATIVE}" ]
then
	iconv -f "${IONCHOD}" -t "${NATIVE}"
else
	cat
fi
}

# strips any pre-existing markup, tokenizes with <c></c>,
# inserts line number markup, puts one sentence per line 
# final filter is there because of some indecision about
# whether I like the line number markups on the interiors of lines
abairti()
{
tr -d "\015" | @EGREP@ -n '^' | LC_COLLATE=C sed "
		s/<[^>]*>//g; 
		s/[&\<>]/ /g; 
		s/[${BDCHARS}][${BDCHARS}${INTCHARS}]*/<c>&<\/c>/g;
		s/\([${INTCHARS}][${INTCHARS}]*\)<\/c>/<\/c>\1/g;
		s/^\([1-9][0-9]*\):/<line uimhir=\"\1\"> /; 
		s/\([^.][^.][^.][.?!][]\"\')}]*\) [ ${TAB}\n]*/\1 <\/line>\n/g;
		s/[^.][^.][^.][.?!][]\"\')}]*$/& <\/line>/" |
		athuimhir | athcheang |
		sed 's/\(.\)<line uimhir[^>]*>/\1/g'
}

# helper for abairti.  If a sentence starts in the middle of a line,
# need the line number tag to propagate down to the beginning of this
# sentence.  Thus, the first chunk below stores the line number markup 
# in hold space and the second chunk retrieves it and inserts at beginning
#  n.b. POSIX sed requires no whitespace after the "!" in the negated 
#  match below.    Discovered while porting to an old DEC machine.
athuimhir()
{
sed '
/^<line uimhir=/ {
h
s/^\(<line uimhir=\"[1-9][0-9]*\">\).*$/\1/
x
}

/^<line uimhir=/!{
G
s/^\(.*\)\n\(<line uimhir=\"[1-9][0-9]*\">\)$/\2 \1/
}

/^<line uimhir=\"[1-9][0-9]*\"> *$/d
'
}

# helper for abairti.  This is the "complement" to athuimhir, for when
# a sentence spans across lines.   It needs to be "rejoined" (athcheangailte).
# onto a single line.
athcheang()
{
sed "
/<\/line>$/ {
H
s/^.*$//
x
s/\n//g
s/[ ${TAB}][ ${TAB}]*/ /g
}

/<\/line>$/!{
H
d
}
"
}


# This is a filter which takes the markup generated by 
# looking up words in the dictionary and tries to resolve
# any ambiguties by looking at local context.
#
#  It is a sequence of sed replacements which are discovered
#  inductively by looking at examples of ambiguities in real
#  Irish texts.  It is important to order the replacements
#  according to their "confidence level"; while it is clear
#  that...     distinguishing between ...  is sometimes much harder.
aonchiall()
{
@PERL@ @prefix@/libexec/aonchiall-${TEANGA}.pl
}

# This is the workhorse.  It does the actually marking up of errors.
rialacha()
{
@PERL@ @prefix@/libexec/rialacha-${TEANGA}.pl
}

# This strips off errors from exceptions to rules
eisceacht()
{
@PERL@ @prefix@/libexec/eisceacht-${TEANGA}.pl
}

# This is the final filter used by the "gr" program.
# It generates a Bourne shell script which produces the
# final output.  It is the part I like the least and 
# users should feel free to replace it with their own
# front ends.
comheadan()
{
sed -n '
/<E/ {
h
s/^<line uimhir=\"\([1-9][0-9]*\)\">/echo "\1:/
s/<[^>]*>//g
s/\(["$`]\)/\\\1/g
s/^echo \\"/echo "/
s/$/" | myaibhsigh"(/
G
x
s/<[^E][^>]*>//g
s/^[^<]*</</
s/>[^<]*</></g
s/>[^<]*$/>/
s/<E[^>]*msg=\"\([^"]*\)\"[^>]*>/"\1," /g
s/^/echo /
s/,\" $/."; echo/
x
s/<[^E\/][^>]*>//g
s/<\/[^E][^>]*>//g
s/\n[^<]*</</
s/>[^<]*$/>/
s/<\/E>[^<]*<E/<\/E><E/g
s/<E[^>]*>\([^<]*\)<\/E>/\1|/g
s/<[^>]*>//g
s/|$/)"/
G
p
}
'
}

# does the error messaging and returns the boolean 
drochchomhad()
{
	if [ ! -e "${1}" ]
	then
		echo "${CLAR}: ${1}: $notfound" >&2
	else
		if [ -d "${1}" ]
		then
			echo "${CLAR}: ${1}: $isdir" >&2
		else
			if [ ! -r "${1}" ]
			then
				echo "${CLAR}: ${1}: $permissions" >&2
			fi
		fi
	fi
	[ ! -e "${1}" ] || [ -d "${1}" ] || [ ! -r "${1}" ]    # return value
}

USEIGNORE="ignore"

unchecked_xml()
{
		diutf | 
		abairti |
		@prefix@/libexec/cuardach "${USEIGNORE}" "${CLAR}" "${TEANGA}"
}

# This replaces "comhad" when "--xml" options is given
# same as filters in comhad up to the interface
xml_output()
{
		unchecked_xml |
		aonchiall |
		rialacha |
		eisceacht
}

# This is the main sequence of filters for checking a given file
comhad()
{
		xml_output |
		comheadan |
		@AWK@ "{sub(/myaibhsigh/,\"${AIBHSIGHVAR}\"); print}" |
		loganu |
		/bin/bash -s
}

litriu_comheadan()
{
sed -n "
/<X>/{
s/<[^X\/][^>]*>//g
s/<\/[^X][^>]*>//g
s/^[^<]*<X>//
s/<\/X>[^<]*$//
s/<\/X>[^<]*<X>/\n/g
p
}
"
}

# This replaces "comhad" above when "--litriu" option is given
litriu()
{
	unchecked_xml | litriu_comheadan
}

# remainder is the "main()"

AIBHSIGHVAR="@EGREP_COLOR@ "
ACTION=comhad
SCRIOBH_HTML=nihea
TEANGA=ga
IONCHOD=unspecified
while [ ${1%%[^-]*} ]
do
	if echo "${1}" | grep "=" > /dev/null
	then
		JUSTOPT=`echo "${1}" | sed 's/=.*//'`
		OPTARG=`echo "${1}" | sed 's/^[^=]*=//'`
		case "${JUSTOPT}" in
		"--teanga" )
			if echo "${TEANGACHA}" | grep "${OPTARG}" > /dev/null
			then
				TEANGA="${OPTARG}"
			else
				printf "${CLAR}: ${unsupported}\n" "${OPTARG}" >&2
				exit 1
			fi
		;;
		"--ionchod" )
			IONCHOD="${OPTARG}"
		;;
		"--help" | "--version" | "--html" | "--xml" | "--litriu" | "--iomlan" )
			unwanted_arg "${JUSTOPT}" >&2
			exit 1
		;;
		* )
			option_error "${JUSTOPT}" >&2
			exit 1
		;;
		esac
	else
		case "${1}" in
		"--version" )
			if [ "${SCRIOBH_HTML}" = "issea" ]
			then
				htmlversion
			else
				versionout
			fi
			exit 0
		;;
		"--help" )
			helpout
			exit 0
		;;
		"--html" )
			AIBHSIGHVAR="@AWK@ -f @prefix@/libexec/hilite.awk pattern="
			SCRIOBH_HTML=issea
		;;
		"--litriu" )
			ACTION=litriu
		;;
		"--xml" )
			ACTION=xml_output
		;;
		"--iomlan" )
			USEIGNORE="noignore"
		;;
		"--ionchod" | "--teanga" )
			no_argument "${1}" >&2
			exit 1
		;;
		* )
			option_error "${1}" >&2
			exit 1
		;;
		esac
	fi
	shift
done

NATIVE=`grep "^${TEANGA} " ${DATADIR}/TEANGACHA | sed "s/^${TEANGA}  *\([^ ]*\).*/\1/"`
CHARSPEC=`grep "^${TEANGA} " ${DATADIR}/TEANGACHA | sed "s/^${TEANGA}  *[^ ]*  *//"`
BDCHARS=`echo "${CHARSPEC}" | sed "s/ .*//"`
INTCHARS=`echo "${CHARSPEC}" | sed "s/^[^ ]*  *//"`
if [ "${IONCHOD}" = "unspecified" ]
then
	IONCHOD="${NATIVE}"
fi

if [ -z "${1}" ]
then
	${ACTION}
else
	until [ -z "$1" ]
	do
		if ! drochchomhad "${1}"
		then
			if [ "${ACTION}" = "comhad" ]
			then
				printf "${checking}\n" "${1}"
			fi
			cat "${1}" | ${ACTION}
		fi	
		shift
	done
fi
exit 0
