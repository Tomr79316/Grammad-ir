#!/bin/bash

nounigram_output()
{
gram-${TEANGA}.pl --no-unigram --iomlan
}

ambiguity_report()
{
TEMPXML=`mktemp` || TEMPXML="/tmp/amb_rep.xml"
nounigram_output | 
tee ${TEMPXML} |
sed 's/<B>/\
<B>/g' |
@EGREP@ '^<B>' | 
sed 's/^<B><Z>\([^Z]*\)<\/Z>.*/\1/' | 
sort | uniq -c | sort -r -n |
while read ambig
do
	echo "${ambig}"
	JUSTTAGS=`echo "${ambig}" | sed 's/^[^<]*//'`
	@EGREP@ -e "${JUSTTAGS}" "${TEMPXML}" | sed "s@<B><Z>${JUSTTAGS}@\\\\&@g" | sed 's/\\<B>/\
<B>/g' | @EGREP@ -e "^<B><Z>${JUSTTAGS}</Z>" | sed "s@^<B><Z>${JUSTTAGS}<\/Z>\([^<]*\)<\/B>.*@\1@" | sort | uniq -c | sort -r -n | head -n 15 | sed "s/^/       /"
done
rm -f "${TEMPXML}"
}

create_unigram_file()
{
nounigram_output |
unigram |
grep -o "<[ACDF-W][^>/]*>" |
sort | uniq -c | sort -r -n |
sed 's/^[^<]*//'
}

# used by Brill
process_two_best()
{
WHOLE=`cat`
COUNT1=`echo ${WHOLE} | sed 's/^\([0-9][0-9]*\).*/\1/'`
FREQ1=`echo ${WHOLE} | sed 's/^[0-9][0-9]* \([0-9][0-9]*\).*/\1/'`
TAG1=`echo ${WHOLE} | sed 's/^[0-9][0-9]* [0-9][0-9]* \(<[^>]*>\).*/\1/'`
COUNT2=`echo ${WHOLE} | sed 's/^[^@]*@\([0-9][0-9]*\).*/\1/'`
ANSWER=`echo "${COUNT1} ${COUNT2} - ${FREQ1} * p" | dc`
echo "${ANSWER} ${TAG1}"
}

# Computes scores for Brill algorithm
# Takes one argument (the temp file containing ambigs in context)
best_tag_in_context()
{
UNAMBIGFILE="/tmp/unambigs"
(echo "0 0 <NOTHING>"; echo "0 0 <NOTHING>";
sort | uniq -c |
while read line
do
	TAG=`echo "${line}" | sed 's/^ *[1-9][0-9]*.//'`
	INCONTEXT=`echo "${line}" | sed 's/^ *\([1-9][0-9]*\).*/\1/'`
	FREQ=`@EGREP@ "${TAG}" ./tagfreqs.txt | sed 's/^ *\([1-9][0-9]*\).*/\1/'`
	PPMINCONTEXT=`echo "${INCONTEXT} 1000000 * ${FREQ} / p" | dc`
	echo "${PPMINCONTEXT} ${FREQ} ${TAG}"
done) > "${UNAMBIGFILE}"
cat "${1}" | sed 's/^<Z>//' | sed 's/<\/Z>//' |
while read ambiguity
do
	echo "${ambiguity}<NOTHING>" | grep -o '<[A-Z][^>]*>' | sed 's/\/>/>/' |
	while read individual
	do
		@EGREP@ -e "${individual}" "${UNAMBIGFILE}"
	done | sort -r -n | head -n 2 | tr "\n" "@" | process_two_best |
	sed "s%^\([0-9]*\) \(.*\)%\1 <B><Z>${ambiguity}</Z>ANYTHING</B>:\2%"
done
rm -f "${UNAMBIGFILE}"
}

# 1st arg=contextual marker (chunk of XML amounting to a single marked up word)
#   assuming one set of escaped parentheses in it!
# 2nd arg, like 1st arg, but used in output to putative "aonchiall-xx.in"
# 3rd arg=(subset of) XML file
#  does both the "before" and "after" contexts 
compute_given_context()
{
AMBIGFILE="/tmp/ambigs"
grep -o "${1} <B><Z>\(<[A-Z][^>]*/>\)*</Z>" "${3}" |
sed "s@^${1} <B>\(<Z>\(<[A-Z][^>]*>\)*</Z>\)@\2@" |
sort -u > "${AMBIGFILE}"
grep -o "${1} <[ACDF-W][^>]*>" "${3}" |
sed "s@^${1} \(<[ACDF-W][^>]*>\)@\2@" |
best_tag_in_context "${AMBIGFILE}" |
sed "s@^\([0-9]*\) @\1 ${2} @"

grep -o "<B><Z>(<[A-Z][^>]*/>)+</Z>[^<]*<\/B> ${1}" "${3}" |
sed "s@^<B>\(<Z>\(<[A-Z][^>]*>\)*</Z>\).*@\1@" |
sort -u > "${AMBIGFILE}" 
grep -o "<[ACDF-W][^>]*>[^<]*<\/[A-Z]> ${1}" "${3}" |
sed "s@^\(<[ACDF-W][^>]*>\).*@\1@" |
best_tag_in_context "${AMBIGFILE}" |
sed "s@:<[^>]*>@ ${2}&@"
rm -f "${AMBIGFILE}"
}

brill_unsupervised_learning()
{
BIGXML="./brill.xml"
BIGXMLSUBSET="/tmp/tobrillsubset.xml"
(nounigram_output |
tee "${BIGXML}" |
@EGREP@ -o "<[ACDF-W][^>/]*>" |
sort | uniq -c | tee ./tagfreqs.txt |
sed 's/^ *[0-9]*.//' |
while read tag
do
	@EGREP@ "${tag}" "${BIGXML}" > "${BIGXMLSUBSET}"
	compute_given_context "`echo "${tag}" | sed 's/<\([A-Z]\)[^>]*>/&[^<]*<\/\\\(\1\\\)>/'`" "`echo "${tag}" | sed 's/<\([A-Z]\)[^>]*>/&ANYTHING<\/\1>/'`" "${BIGXMLSUBSET}"
done;
cat "${BIGXML}" |
@EGREP@ -o ">[^< ]+<" |
sort | uniq -c | sort -r -n |
sed 's/^ *[0-9]*.//' |
head -n 50 |
while read commonword
do
	@EGREP@ "${commonword}" "${BIGXML}" > "${BIGXMLSUBSET}"
	compute_given_context "`echo "${commonword}" | sed 's/>\(.*\)/\\\\(<[^>]*>\\\\)*\1\/[A-Z]>/'`" "`echo "${commonword}" | sed 's/>\([^<]*\)</\1/'`" "${BIGXMLSUBSET}"
done) | sort -r -n | @EGREP@ -v '^0 ' | sed 's/^[0-9]* //'
rm -f "${BIGXMLSUBSET}"
}

ACTION="comhad"
TEANGA="ga"
while [ ${1%%[^-]*} ]
do
	if echo "${1}" | grep "=" > /dev/null
	then
		JUSTOPT=`echo "${1}" | sed 's/=.*//'`
		OPTARG=`echo "${1}" | sed 's/^[^=]*=//'`
		case "${JUSTOPT}" in
		"--teanga" )
			TEANGA="${OPTARG}"
		;;
		esac
	else
		case "${1}" in
		"--brill" )
			ACTION="brill_unsupervised_learning"
		;;
		"--ilchiall" )
			ACTION="ambiguity_report"
		;;
		"--minic" )
			ACTION="create_unigram_file"
		;;
		"--ionchod" | "--teanga" | "--aschur" )
			no_argument "${1}" >&2
			exit 1
		;;
		* )
			option_error "${1}" >&2
			exit 1
		;;
		esac
	fi
	shift
done

${ACTION}
exit 0
