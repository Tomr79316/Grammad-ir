package Lingua::@TEANGA@::Gramadoir;

use 5.008;
use strict;
use warnings;

use Carp;
use File::Spec;
use Storable;
use Memoize;
use Encode qw(decode from_to);
use String::Approx qw(amatch adist);
use Lingua::@TEANGA@::Gramadoir::Languages;

our $VERSION = '@PACKAGE_VERSION@';
use vars qw(@FOCAIL @MORPH @PUREMORPH @TOKEN %EILE %EARRAIDI %NOCOMBO %POS %SOP %GRAMS %MESSAGES %IGNORE $lh);

memoize('tag_one_word', TIE => [ 'Memoize::ExpireLRU',
				CACHESIZE => 5000,
				]);

=head1 NAME

Lingua::@TEANGA@::Gramadoir - Check the grammar of @NAME_ENGLISH@ language text

=head1 SYNOPSIS

  use Lingua::@TEANGA@::Gramadoir;

  my $gr = new Lingua::@TEANGA@::Gramadoir;

  my $errors = $gr->grammatical_errors( $text );
  foreach my $error (@$errors) {
  	# process $error appropriately
  }

=head1 DESCRIPTION

This module contains the code for segmentation, spell checking,
part-of-speech tagging, and grammar checking used by "An GramadE<oacute>ir",
an open-source grammar and style checker that can be used
with vim, emacs, OpenOffice, or through a command-line interface.
An GramadE<oacute>ir is intended as a platform for the development of 
sophisticated natural language processing tools for languages with
limited computational resources.

The Perl code contained in this module is generated automatically
from a higher-level representation of the grammatical rules
and should not be edited directly.  Anyone interested in helping
improve the lexicon or the rule sets should download the 
developers' pack from the An GramadE<oacute>ir web site:
L<http://borel.slu.edu/gramadoir/>.

=head1 CONSTRUCTOR

=over 4

=item new %PARAMS

Constructs an instance of the grammar checker and loads the lexicon
into memory.  It should only be called once.   Options may be specified
by passing a hash containing any of the following keys:

fix_spelling => 0

Suggest replacements for misspelled or unknown words.

use_ignore_file => 0

Read a file containing words to be ignored when checking spelling and grammar.

unigram_tagging => 1

Resolve ambiguous part of speech according to frequency.  This should
be set to false only for debugging purposes because the pattern matching
for grammatical errors relies on complete disambiguation.

interface_language => ""

Specify the language of output messages
(B<not> necessarily the language of the text to be checked).
With the default value, Locale::Maketext attempts to determine
the correct language to use based on things like your
environment variables.

input_encoding => '@NATIVE@'

Specify the encoding for all texts passed to one of the module's exported
functions.   There is no currently no way to change the encoding of
the data returned by the exported functions (always encoded as perl strings).

=back

=cut

sub new {
	my $invocant = shift;
	my $class = ref($invocant) || $invocant;
	my $self = {
			fix_spelling => 0,
			use_ignore_file => 0,
			unigram_tagging => 1,
			interface_language => '',
			input_encoding => '@NATIVE@',
			@_,
	};

	if ($self->{'interface_language'}) {
		$lh = Lingua::@TEANGA@::Gramadoir::Languages->get_handle($self->{'interface_language'});
	}
	else {
		$lh = Lingua::@TEANGA@::Gramadoir::Languages->get_handle();
	}
	croak 'Could not set interface language' unless $lh;

	( my $datapath ) = __FILE__ =~ /(.*)\.pm/;
	my $ref;
	my $errormsg = gettext('%s: problem reading the database\n',
				gettext('An Gramadoir'));
	eval {$ref = retrieve(File::Spec->catfile($datapath, 'eile.hash'))};
	croak $errormsg if ($@ or !$ref);
	%EILE = %$ref;
	eval {$ref = retrieve(File::Spec->catfile($datapath, 'earraidi.hash'))};
	croak $errormsg if ($@ or !$ref);
	%EARRAIDI = %$ref;
	eval {$ref = retrieve(File::Spec->catfile($datapath, 'nocombo.hash'))};
	croak $errormsg if ($@ or !$ref);
	%NOCOMBO = %$ref;
	eval {$ref = retrieve(File::Spec->catfile($datapath, 'pos.hash'))};
	croak $errormsg if ($@ or !$ref);
	%POS = %$ref;
	%SOP = reverse %POS;
	eval {$ref = retrieve(File::Spec->catfile($datapath, '3grams.hash'))};
	croak $errormsg if ($@ or !$ref);
	%GRAMS = %$ref;
	eval {$ref = retrieve(File::Spec->catfile($datapath, 'messages.hash'))};
	croak $errormsg if ($@ or !$ref);
	%MESSAGES = %$ref;
	for my $i (0 .. 6) {
		eval {$ref = retrieve(File::Spec->catfile($datapath, "focail$i.hash" ) )};
		croak $errormsg if ($@ or !$ref);
		push @FOCAIL, $ref;
	}
	eval {$ref = retrieve(File::Spec->catfile($datapath, 'token.hash'))};
	croak $errormsg if ($@ or !$ref);
	@TOKEN = @$ref;
	foreach my $rule (@TOKEN) {
		my $patt = $rule->{'patt'};
		$rule->{'compiled'} = qr/$patt/;
		$rule->{'tail'} = substr($rule->{'tag'},1,1);
	}
	eval {$ref = retrieve(File::Spec->catfile($datapath, 'morph.hash'))};
	croak $errormsg if ($@ or !$ref);
	@MORPH = @$ref;
	foreach my $rule (@MORPH) {
		my $patt = $rule->{'patt'};
		$rule->{'compiled'} = qr/$patt/;
		$patt = $rule->{'rootpos'};
		if ($patt =~ m/^<\.([+*])?>$/) {
			$rule->{'poscompiled'} = '';   # for speed
		}
		else {
			$patt =~ s/\./[^>]/g;
			$patt =~ s/>$/\/?>/;
			$rule->{'poscompiled'} = qr/$patt/;
		}
		push @PUREMORPH, $rule if ($rule->{'level'} == -1);
	}

	if ($self->{'use_ignore_file'}) {
		my $homedir = $ENV{HOME} || $ENV{LOGDIR}; # || (getpwuid($>))[7];
		if (open (DATAFILE, File::Spec->catfile( $homedir, '.neamhshuim' ))) {
			while (<DATAFILE>) {
				chomp;
				carp gettext('%s: `%s\' corrupted at %s\n', 
					gettext('An Gramadoir'), ".neamhshuim", $.) if /[^@BDCHARS@@INTCHARS@]/;
				$IGNORE{$_}++;
			}
		}
	}

	return bless $self, $class;
}

sub gettext
{
	my ( $string, @rest ) = @_;

	$string =~ s/\[/~[/g;
	$string =~ s/\]/~]/g;
	$string =~ s/\%s/[_1]/;
	$string =~ s/\%s/[_2]/;
	$string =~ s/\%s/[_3]/;
	$string =~ s/\\n$/\n/;
	$string =~ s#\\/\\([1-9])\\/#/[_$1]/#;
	$string =~ s#\\/([@BDCHARS@@INTCHARS@]+)\\/#/$1/#;

	return $lh->maketext($string, @rest);
}

##############################################################################

=head1 METHODS

=over

=item get_sentences TEXT

Splits the input TEXT up into sentences and returns a reference to an
array containing the sentences.

=cut

##############################################################################

# approximates "abairti" from bash version
# General philosophy is that it is *not* the job of the grammar checker
# to filter incoming texts (of, say, TeX or SGML markup).  On the other hand,
# SGML-like markup *must* be stripped so it doesn't interfere with
# the real work of the grammar checker.
sub get_sentences
{
	my ( $self, $text ) = @_;
	return undef unless defined $text;
	eval {from_to($text,$self->{'input_encoding'},'@NATIVE@') };
# TRANSLATORS: "conversion" here means conversion between character encodings
	croak gettext('conversion from %s is not supported', 
			$self->{'input_encoding'}) if $@;
	my $answer = get_sentences_real($text);
	foreach my $s (@$answer) {
		$s = decode('@NATIVE@', $s);
	}
	return $answer;
}

my $BD="\001";
my $NOBD="\002";
sub get_sentences_real
{
	my $sentences = [];

	for ($_[0]) {
		s/^\s+//;
		s/<[^>]*>/ /g;  # naive; see comments above
		s/\\[tnvfr]/ /g;
		s/&/&amp;/g;    # this one first!
		s/</&lt;/g;
		s/>/&gt;/g;
		s/$NOBD//g;
		s/$BD//g;
		giorr ( $_ );
		s/([^$NOBD][.?!][]"')}]*)[ \t\n]+/$1$BD/g;
		s/"/&quot;/g;   # &apos; ok  (note " in prev line)
		s/\s+/ /g;
		s/$NOBD//g;
		@$sentences = split /$BD/;
	}

	return $sentences;
}

# two arguments; first is word to be tagged, 2nd is string of grammatical bytes
sub add_grammar_tags
{
	my ( $self, $word, $grambytes ) = @_;
	my $tagz = $self->get_grammar_tags($grambytes);
	my $ans;
	if ( length($grambytes) == 1) {
		$tagz =~ m/^<([A-Z])/;
		$ans = $tagz.$word."</".$1.">";
	}
	else {
		$tagz =~ s/>/\/>/g;
		$ans = "<B><Z>".$tagz."</Z>".$word."</B>";
	}
	return $ans;
}

# convert grammar bytes into string of tags like "<N><V><A>"
sub get_grammar_tags
{
	my ( $self, $grambytes ) = @_;

	my $ans='';
	foreach my $byte (split //, $grambytes) {
		my $tag = $POS{$byte};
		if (defined($tag)) {
			$ans = $ans.$tag;
		}
		else {
			carp gettext('%s: illegal grammatical code\n', gettext('An Gramadoir'));
		}
	}
	carp gettext('%s: no grammar codes: %s\n', gettext('An Gramadoir'), "x") unless ($ans);
	return $ans;
}

# even though not called explicitly in this module,
# these functions are called indirectly to implement
# \l and \L in morphological rules; see Makefile.PL.in
sub mylc {
	my ($string) = @_;
	$string =~ tr/@CAPITALS@/@LOWERS@/;
	return $string;
}

sub mylcfirst {
	my ($string) = @_;
	$string =~ s/^(.)(.*)$/mylc($1).$2/e;
	return $string;
}

sub clean_lookup
{
	my ( $self, $current ) = @_;

	for my $href ( @FOCAIL ) {
		if ( exists($href->{$current}) ) {
			return $self->get_grammar_tags($href->{$current});
		}
	}
	return "";
}

# look up in the hash tables FOCAIL, EILE, EARRAIDI consecutively
# same arguments, return conventions as tag_recurse, except
# no maximum depth set since this doesn't recurse.
sub lookup
{
	my ( $self, $original, $current, $level, $posans ) = @_;

	$$posans = $self->clean_lookup($current);
	my $ans;
	if ($$posans) {
		if ( $level == 0 ) {
			$ans = "<E msg=\"MOIRF{$current}\"><X>".$original."</X></E>";
		}
		elsif ( $level == 1 ) {
			$ans = "<E msg=\"CAIGHDEAN{$current}\"><X>".$original."</X></E>";
		}
		elsif ( $level == 2 ) {
			$ans = "<E msg=\"DROCHMHOIRF{$current}\"><X>".$original."</X></E>";
		}
		else {
			# -1 will only occur when tagging as compound and
			# recursing on the two components, in which case
			# (for now), the tags don't matter
			$ans = '<X>';
		}
		return $ans;
	}
	$$posans = '<OK>';
	if ( exists($EILE{$current}) ) {
		my $correction = $EILE{$current};
		if ( $level == -1 ) {
			$ans = "<E msg=\"CAIGHDEAN{$correction}\"><X>".$original."</X></E>";
		}
		elsif ( $level == 0 ) {
			$ans = "<E msg=\"CAIGHMOIRF{$correction}\"><X>".$original."</X></E>";
		}
		elsif ( $level == 1 ) {
			$ans = "<E msg=\"CAIGHDEAN{$current ($correction)}\"><X>".$original."</X></E>";
		}
		else {
			$ans = "<E msg=\"DROCHMHOIRF{$current ($correction)}\"><X>".$original."</X></E>";
		}
		return $ans;
	}
	if ( exists($EARRAIDI{$current}) ) {
		my $correction = $EARRAIDI{$current};
		if ( $level == -1 ) {
			$ans = "<E msg=\"MICHEART{$correction}\"><X>".$original."</X></E>";
		}
		else {
			$ans = "<E msg=\"MIMHOIRF{$current ($correction)}\"><X>".$original."</X></E>";
		}
		return $ans;
	}
	return "";
}

# note use of "tag_recurse" on the conjectural pieces below; 
# this is (primarily) to deal with capitalization of the halves.
# definitely *don't* want to call full tag on the two pieces or
# else *this* function will recurse 
sub tag_as_compound
{
	my ( $self, $word ) = @_;
	my $dummy;
	if ($word =~ m/^([^-]+)-(.*)$/) {
		my $l = $1;
		my $r = $2;
		my $t1 = $self->tag_recurse( $l, $l, -1, \$dummy, 2 );
		my $t2 = $self->tag_recurse( $r, $r, -1, \$dummy, 2 );
		if ($t1 && $t2) {
			if ($t1 !~ m/<E/ && $t2 !~ m/<E/) {
				return "<E msg=\"COMHFHOCAL{$l+$r}\"><X>".$word."</X></E>";
			}
			else {
				return "<E msg=\"COMHCHAIGH{$l+$r}\"><X>".$word."</X></E>";
			}
		}
	}
	else {
		my $len = length($word);
		for (my $i = 3; $i < $len-2; $i++) { # i=len of left
			my $l = substr($word, 0, $i);
			my $r = substr($word, $i, $len - $i);
			if (!exists($NOCOMBO{$l}) &&
			    !exists($NOCOMBO{$r})) {
				my $tl = $self->tag_recurse($l,$l,-1,\$dummy,2);
				my $tr = $self->tag_recurse($r,$r,-1,\$dummy,2);
			    	if ( $tl && $tr ) {
					if ($tl !~ m/<E/ && $tr !~ m/<E/) {
						return "<E msg=\"COMHFHOCAL{$l+$r}\"><X>".$word."</X></E>";
					}
					else {
						return "<E msg=\"COMHCHAIGH{$l+$r}\"><X>".$word."</X></E>";
					}
				}
			}
		}
	}
	return "";
}

sub tag_as_near_miss
{
	my ( $self, $word ) = @_;

	if ($self->{'fix_spelling'}) {
		my $wordlen = length($word);
		if ($wordlen > 2) {
			for my $href ( @FOCAIL ) {
				my %matches;
				my $dist = "1";
				if ($word =~ m/[@CAPITALS@]/) {
					$dist =~ s/$/ i/;
				}
				for (my $i = 0; $i < $wordlen-1; $i++) {
					my $perm = $word;
					$perm =~ s/(.{$i})(.)(.)/$1$3$2/;
					$matches{$perm}++ if (exists($href->{$perm}));
				}
				for (amatch($word, [ $dist, "I0S0" ], (keys %$href))) {
					$matches{$_}++ if (length($_)==$wordlen-1);
				}
				for (amatch($word, [ $dist, "D0S0" ], (keys %$href))) {
					$matches{$_}++ if (length($_)==$wordlen+1);
				}
				for (amatch($word, [ $dist, "D0I0" ], (keys %$href))) {
					$matches{$_}++ if (length($_)==$wordlen);
				}
				my $suggs = join(', ', (keys %matches));
				return "<E msg=\"MOLADH{$suggs}\"><X>$word</X></E>" if $suggs;
			}
		}
	}
	return "";
}

sub find_bad_three_grams
{
	my ( $self, $word ) = @_;

	$word =~ s/^/</;
	$word =~ s/$/>/;
	my $end = length($word) - 2;
	for (my $i = 0; $i < $end; $i++) {
		my $cand = substr($word, $i, 3);
		if (!exists($GRAMS{$cand})) {
			$cand =~ tr/<>/^$/;
			$word =~ tr/<>//d;
			return "<E msg=\"GRAM{$cand}\"><X>$word</X></E>";
		}
	}
	return "";
}

sub tag_one_word_clean
{
	my ( $self, $word ) = @_;

	my $ans = $self->clean_tag_recurse($word, 4);
	if ($ans) {
		# sort -u, plus take out <F> if there are others
		my %tempseen;
		while ($ans =~ m/(<[^>]+>)/g) {
			my $cod = $SOP{$1};
			if (defined($cod)) {
				$tempseen{$cod}++;
			}
			else {
				carp gettext('%s: illegal grammatical code\n',
						gettext('An Gramadoir'));
			}
		}
		my $codez = join('', sort(keys %tempseen));
		$codez =~ s/\177// if (length($codez) > 1);
		$ans = $self->add_grammar_tags($word, $codez);
	}
	return $ans;
}

# takes a single word as an argument and returns it tagged, without fail
# e.g. it will get something like <X>neamhword</X> if it is unknown
sub tag_one_word
{
	my ( $self, $word ) = @_;

	if ($self->{'use_ignore_file'}) {
		return "<Y>".$word."</Y>" if ( exists($IGNORE{$word}) );
	}
	my $ans = $self->tag_one_word_clean($word);
	return $ans if $ans;
	my $dummy;
	$ans = $self->tag_recurse($word, $word, -1, \$dummy, 6);
	return $ans if $ans;
	$ans = $self->tag_as_compound($word);
	return $ans if $ans;
	$ans = $self->tag_as_near_miss($word);
	return $ans if $ans;
	$ans = $self->find_bad_three_grams($word);
	return $ans if $ans;
	return "<X>$word</X>";
}

##############################################################################

=item tokenize TEXT

Splits the input TEXT up into orthographic words and returns a reference to an
array containing the words.

=cut

##############################################################################


sub tokenize
{
	my ( $self, $text ) = @_;
	return undef unless defined $text;
	eval {from_to($text,$self->{'input_encoding'},'@NATIVE@') };
	croak gettext('conversion from %s is not supported', 
			$self->{'input_encoding'}) if $@;

	my $answer = [];
	my $sentences = get_sentences_real($text);
	foreach my $sentence (@$sentences) {
		$sentence = $self->tokenize_real($sentence);
		push @$answer, $1 while ($sentence =~ m/<[A-Zc][^>]*>([^<]*)<\/[A-Zc]>/g);
	}
	foreach my $s (@$answer) {
		$s = decode('@NATIVE@', $s);
	}
	return $answer;
}

sub maybe_tokenize
{
	my ( $self, $tag, $word, $t ) = @_;
	if ( $t eq 'd') {
		if ($self->tag_one_word_clean($word)) {
			return '<c>'.$word.'</c>';
		}
		else {
			return $word;
		}
	}
	else {
		return $tag.$word.'</'.$t.'>';
	}
}


# takes a sentence as input and returns the sentence with trivial markup
# around each token (in bash version this was part of abairti)
sub tokenize_real
{
	my ( $self, $sentence ) = @_;
	my $answer="";
	# assumes get_sentences_real has been called, collapses \s+ to " "
	foreach my $chunk (split / /,$sentence) {
		if ($chunk =~ m/^[@BDCHARS@]+$/) {
			$chunk =~ s/^/<c>/;
			$chunk =~ s/$/<\/c>/;
		}
		else {
			my $chunkdone = '1';
			foreach my $rule (@TOKEN) {
				my $chtemp="";
				my $p = $rule->{'compiled'};
				my $tag = $rule->{'tag'};
				my $t = $rule->{'tail'};
				my $todo;
				while ($chunk =~ /([^<]*)(<[A-Zc][^>]*>[^<]+<\/[A-Zc]>)/g) {
					$todo = $1;
					my $done = $2;
					if ($todo) {
						$chunkdone = '';
						$todo =~ s/$p/$self->maybe_tokenize($tag,$1,$t)/eg;
					}
					$chtemp .= $todo.$done;
				}
				$chunk =~ /([^>]*)$/;
				$todo = $1;
				if ($todo) {
					$chunkdone = '';
					$todo =~ s/$p/$self->maybe_tokenize($tag,$1,$t)/eg;
				}
				last if $chunkdone;
				$chtemp .= $todo;
				$chunk = $chtemp;
			}
			$chunk =~ s/&<c>(quot|[gl]t|amp)<\/c>;/&$1;/g;
			$chunk =~ s/(<\/.>)</$1 </g;
		}
		$answer .= " " if $answer;
		$answer .= $chunk;
	}
	return $answer;
}

# takes an untagged sentence (usually fresh from get_sentences_real),
# tokenizes, and adds a preliminary XML markup consisting of all possible
# parts of speech for each word
sub unchecked_xml
{
	my ( $self, $sentence ) = @_;
	$sentence = $self->tokenize_real($sentence);
	$sentence =~ s/(<[A-Zc][^>]*>[^<]+<\/[A-Zc]>) \1/<E msg="DUBAILTE">$1 $1<\/E>/g;
	1 while ( $sentence =~ s/<c>([^<]*)<\/c>/$self->tag_one_word($1);/e );
	$sentence =~ s/^/<line> /;
	$sentence =~ s/$/ <\/line>/;
	return $sentence;
}

##############################################################################

=item spell_check TEXT

Returns a reference to an array containing the misspelled words appearing
in the input text.

=cut

##############################################################################

# current behavior is to accept <F> words as correct, like aspell-ga literary.
# Just change X -> FX below to reject these words (this would
# break the replcheck target though...)
sub spell_check
{
	my ( $self, $text ) = @_;
	return undef unless defined $text;
	eval {from_to($text,$self->{'input_encoding'},'@NATIVE@') };
	croak gettext('conversion from %s is not supported', 
			$self->{'input_encoding'}) if $@;
	my $badwords = [];
	my $sentences = get_sentences_real($text);
	foreach my $s (@$sentences) {
		$s = $self->unchecked_xml($s);
		if ($s =~ m/<[X]>/) {
			$s =~ s/<[^X\/][^>]*>//g;
			$s =~ s/<\/[^X][^>]*>//g;
			$s =~ s/^[^<]*<[X]>//;
			$s =~ s/<\/[X]>[^<]*$//;
			$s =~ s/<\/[X]>[^<]*<[X]>/\n/g;
			$s = decode('@NATIVE@', $s);
			push @$badwords,$s;
		}
	}
	return $badwords;
}

##############################################################################

=item all_possible_tags WORD

Takes the input WORD and returns it with (XML-style) markup 
indicating all of its possible parts of speech.

=cut

##############################################################################

sub all_possible_tags
{
	my ( $self, $word ) = @_;
	return undef unless defined $word;
	eval {from_to($word,$self->{'input_encoding'},'@NATIVE@') };
	croak gettext('conversion from %s is not supported', 
			$self->{'input_encoding'}) if $@;
	return decode('@NATIVE@', $self->tag_one_word($word));
}


##############################################################################

=item add_tags TEXT

Takes the input TEXT and returns a reference to an array of sentences 
with (XML-style) *disambiguated* part-of-speech tags.  Does not do
any grammatical rule checking.

=cut

##############################################################################

sub add_tags
{
	my ( $self, $text ) = @_;
	return undef unless defined $text;
	eval {from_to($text,$self->{'input_encoding'},'@NATIVE@') };
	croak gettext('conversion from %s is not supported', 
			$self->{'input_encoding'}) if $@;
	my $sentences = get_sentences_real($text);
	foreach my $s (@$sentences) {
		$s = $self->add_tags_real($s);
		$s =~ s/<\/?E[^>]*>//g;   # just POS tags
		$s = decode('@NATIVE@', $s);
	}
	return $sentences;
}

# takes a sentence as input, usually fresh from get_sentences_real
# Forms the main step in add_tags, and also in xml_stream and
# grammatical_errors (in the latter two cases being followed by
# a call to "rialacha" to add additional <E> markup)
sub add_tags_real
{
	(my $self, my $sentence) = @_;
	$sentence = unchecked_xml(@_);
	comhshuite($sentence);
	aonchiall($sentence);
	aonchiall_deux($sentence);
	unigram($sentence) if $self->{'unigram_tagging'};
	return $sentence;
}

##############################################################################

=item xml_stream TEXT

Takes the input TEXT and returns it as well-formed XML (encoded as perl
strings, not utf-8) with full grammatical markup.   Error messages are not 
localized.  This function should only be exported for debugging/development
purposes.  Use "grammatical_errors" (which is basically "xml_stream" plus
some whittling down) as an interface with other programs.

=cut

##############################################################################
# bash version's vanilla_xml_output/aspell_xml_output
sub xml_stream
{
	my ( $self, $text ) = @_;
	return undef unless defined $text;
	eval {from_to($text,$self->{'input_encoding'},'@NATIVE@') };
	croak gettext('conversion from %s is not supported', 
			$self->{'input_encoding'}) if $@;
	my $langcode='@TEANGA@';
	my $langlower="\L$langcode\E";
	my $answer='<?xml version="1.0" encoding="utf-8" standalone="no"?>';
	$answer = $answer."\n<!DOCTYPE teacs SYSTEM \"http://borel.slu.edu/dtds/gram-$langlower.dtd\">";
	$answer = $answer."\n<teacs>\n";
	my $sentences = get_sentences_real($text);
	foreach my $s (@$sentences) {
		$s = $self->add_tags_real($s);
		rialacha ($s);
	}
	$answer = $answer.join("\n", @$sentences);
	$answer = $answer."\n</teacs>\n";
	$answer = decode("@NATIVE@", $answer);
	return $answer;
}

sub localize_me
{
	my ( $self, $msg ) = @_;

	$msg =~ m/^([^{]+)/;
	my $macro = $1;
	my $msgstr = '-';
	if (exists($MESSAGES{$macro})) {
		my $msgid = $MESSAGES{$macro};
		if ($msg =~ m/{(.*)}$/) {
			my $argument = $1;
			$argument =~ tr/_/ /;  # from EILE database
			$msgstr = gettext($msgid, $argument);
		}
		else {
			$msgstr = gettext($msgid);
		}
	}
	else {
		carp gettext('%s: unrecognized error macro: %s\n',
				gettext('An Gramadoir'),$macro);
	}
	return $msgstr;
}

##############################################################################

=item grammatical_errors TEXT

Returns the grammatical errors in the input TEXT as a reference to an array,
one error per element of the array, with each error given in a simple
XML format usable by other applications.  Error messages are localized
according to locale settings as determined by Locale::Maketext.

=cut

##############################################################################

# used to be " " x length($text)  but we need to keep newlines for coords
sub whiteout
{
	my ( $text ) = @_;
	$text =~ s/[^\n]/ /g;
	return $text;
}

# like the bash "xml_api"
sub grammatical_errors
{
	my ( $self, $text ) = @_;
	return undef unless defined $text;
	eval {from_to($text,$self->{'input_encoding'},'@NATIVE@') };
	croak gettext('conversion from %s is not supported', 
			$self->{'input_encoding'}) if $@;
	my $pristine = $text;  # so actually NOT pristine e.g. if input is utf8
	  # next three lines need to preserve all newlines, all lengths!
	  # they mimic the code in get_sentences_real
	$pristine =~ s/(<[^>]*>)/whiteout($1);/eg;
	$pristine =~ s/\\[tnvfr]/  /g;
	$pristine =~ s/$NOBD/ /g;
	$pristine =~ s/$BD/ /g;
	  # next three lines add "buffering" for easier searching per-line
	$pristine =~ s/^/ /;
	$pristine =~ s/\n/ \n /g;
	$pristine =~ s/$/ /;

	my $errors = [];  # array reference to return
  # endoflast is global offset in $pristine following the end of last error
	my $endoflast = 0;
	my $toy = 1;   # line number at position $endoflast; lines count from 1
	my $tox = -1;  # line position of end of last match (not like $+[0]!)

	my $sentences = get_sentences_real($text);
	foreach my $plain (@$sentences) {
		my $s = $self->add_tags_real($plain);
		rialacha ($s);
		if ($s =~ /<E/) {
			my $buffered = " $plain ";
			while ($s =~ m!(<E[^>]+>)(([^<]|<[^/]|</[^E])*)</E>!g) {
				my $thiserror = $1;
				my $errortext = $2;
				my $fromy;
				my $fromx;
				$errortext =~ s/<[^>]+>//g; # strip pos stuff
				my $errorregexp = $errortext;
				$errorregexp =~ s/\^/\\^/g; # esperanto
				$thiserror =~ s/^<E/<E sentence="$plain" errortext="$errortext"/;
				$errorregexp =~ s/ /\\s+/g;
				$errorregexp =~ s/^/(?<=[^@BDCHARS@])/;
				$errorregexp =~ s/$/(?=[^@BDCHARS@])/;
				$pristine =~ m!$errorregexp!gs;
				my $globs = $-[0];
				my $globe = $+[0];
				my $str = substr($pristine, $endoflast, $globs - $endoflast);
				$fromy = $toy + ($str =~ tr/\n/\n/);
				if ($fromy == $toy) {
					$fromx = $tox + 1 + ($globs - $endoflast);
				}
				else {
					$str =~ m/([^\n]+)$/s;
					$fromx = length ($1); 
				}
				$str = substr($pristine, $globs, $globe - $globs);
				$toy = $fromy + ($str =~ tr/\n/\n/); 
				if ($fromy == $toy) {
					$tox = $fromx + ($globe - $globs) - 1;
				}
				else {
					$str =~ m/([^\n]+)$/s;
					$tox = length ($1) - 1 ; 
				}
				$endoflast = $globe;
				$fromx--;
				my $toans = $tox - 1;  # keep tox for next err 
				$buffered =~ m!$errorregexp!g;
				my $offset = $-[0] - 1;
				$thiserror =~ s!^<E !<E offset="$offset" fromy="$fromy" fromx="$fromx" toy="$toy" tox="$toans" !;
				$thiserror = decode("@NATIVE@", $thiserror);
				$thiserror =~ s! msg="([^"]+)"!" msg=\"".$self->localize_me($1)."\""!e;
				push @$errors, $thiserror;
			}
		}
	} # loop over sentences
	return $errors;
}

# functionally same as aonchiall; separate for profiling
sub aonchiall_deux
{
	return aonchiall(@_);
}

# called from rialacha "OK" rules
sub strip_errors
{
	my ( $str ) = @_;
	$str =~ s/<E[^>]*>//;
	$str =~ s/<\/E>//;
	return $str;
}

# called from aonchiall ":!" rules
# first argument is the stuff between <Z> and </Z>
# second argument is the word
# third argument is a regexp matching all tags to be tossed out
sub strip_badpos
{
	my ( $str, $word, $badpos ) = @_;
	my $pos;
	my $orig = $str;
	$str =~ s/$badpos//g;
	if ($str =~ m/></) {
		return "<B><Z>$str</Z>$word</B>";
	}
	elsif ($str =~ m/^<([A-Z])/) {
		$pos = $1;
		$str =~ s/.>$/>/;
		return "$str$word</$pos>";
	}
	else {
		$orig =~ s/^(<([A-Z])[^>]*).><.*/$1>/;
		$pos = $2;
		return "$orig$word</$pos>";
	}
}

##############################################################################
#   The remaining functions are automatically generated using a high
#   level description of @NAME_ENGLISH@ grammar; see the An Gramadoir
#   developers' pack for more information...
#       http://borel.slu.edu/gramadoir/
##############################################################################
sub aonchiall
{
	for ($_[0]) {
# aonchiall code goes here
	}
}

sub comhshuite
{
	for ($_[0]) {
# comhshuite code goes here
	}
}

# analogue of "escape_punc" in bash version
sub giorr
{
	for ($_[0]) {
	s/^/ /;
	s/([^@BDCHARS@0-9-][0-9])([.?!])/$1$NOBD$2/g;
	s/([^@BDCHARS@0-9-][0-9][0-9])([.?!])/$1$NOBD$2/g;
	s/(\...)([.?!])/$1$NOBD$2/g;
	s/\.(ie|uk)$NOBD([.?!])/.$1$2/g;
	s/(\..)([.?!])/$1$NOBD$2/g;
	s/(\.)([.?!])/$1$NOBD$2/g;
	s/([IVX][IVX])([.?!])/$1$NOBD$2/g;
# giorr code goes here
	s/([?!][]"')}]*[ \t\n-]+[@LOWERS@])/$NOBD$1/g;
	s/^ //;
	}
}

sub rialacha
{
	for ($_[0]) {
# rialacha code goes here
	}
}

sub unigram
{
	for ($_[0]) {
# unigram code goes here
	}
}

# recursive helper function for "tag_one_word".  
#
#  Arguments: "original" word to be tagged; the "current"
#  decomposed version for lookup (and possible further decomp)
#  a "level" which determines whether, if a match is found,
#  whether it should be untagged (-1), tagged as OK but noting decomp (0),
#  tagged as non-standard (1), or tagged as a misspelling (2),
#  a scalar reference "posans" to be filled in with the list of POS tags
#  found for "current" (useful if return value has "<E..."),
#  and the maximum allowed recursion depth (decremented on each recursion)
#
#   Returns the word tagged appropriately if a match is found, returns
#   false ("") if the recursion bottoms out with no matches
sub tag_recurse
{
	my ( $self, $original, $current, $level, $posans, $maxdepth ) = @_;

	my $ans = $self->lookup( $original, $current, $level, $posans );
	return "" if ($maxdepth == 0);
	return $ans if $ans;
	my $newcurrent;
	foreach my $rule (@MORPH) {
		my $p = $rule->{'compiled'};
		if ( $current =~ m/$p/ ) {
			my $r = $rule->{'repl'};
			$newcurrent = $current;
			$newcurrent =~ s/$p/$r/eeg;
			$ans = $self->tag_recurse($original, $newcurrent, ($level > $rule->{'level'}) ? $level : $rule->{'level'}, $posans, $maxdepth - 1);
			if ($ans) {
				unless ($$posans eq '<OK>') {
					my $pos = $rule->{'poscompiled'};
					my $temp = $$posans;
					$$posans = '';
					while ($temp =~ m/(<[ACDF-Y][^>]*>)/g) {
						my $cand = $1;
						if ($cand =~ m/$pos/) {
							$r = $rule->{'replpos'};
							$cand =~ s/$pos/$r/ee unless ($r eq '"<&>"');
							$$posans .= $cand;
						}
					}
				}
				return $ans if $$posans;
			}
		}
	}
	return "";
}

sub clean_tag_recurse
{
	my ( $self, $current, $maxdepth ) = @_;

	my $ans = $self->clean_lookup( $current );
	return $ans if ($maxdepth == 0);
	my $newcurrent;
	foreach my $rule (@PUREMORPH) {
		my $p = $rule->{'compiled'};
		if ( $current =~ m/$p/ ) {
			my $r = $rule->{'repl'};
			my $pos = $rule->{'poscompiled'};
			$newcurrent = $current;
			$newcurrent =~ s/$p/$r/eeg;
			my $toadd = $self->clean_tag_recurse($newcurrent, $maxdepth - 1);
			while ($toadd =~ m/(<[^>]+>)/g) {
				my $cand = $1;
				if ($cand =~ m/$pos/) {
					$r = $rule->{'replpos'};
					$cand =~ s/$pos/$r/ee unless ($r eq '"<&>"');
					$ans .= $cand;
				}
			}
		}
	}
	return $ans;
}



1;

__END__

=back

=head1 SEE ALSO

=over 4

=item *
L<http://borel.slu.edu/gramadoir/>

=item *
L<Locale::Maketext>

=item *
L<perl(1)>

=back

=head1 BUGS

The grammar checker does not attempt a full parse of the input
sentences nor does it attempt to exploit any semantic information.
There are, therefore, certain constructs that cannot be dealt with
correctly. See L<http://borel.slu.edu/gramadoir/bugs.html> for a
detailed discussion and specific examples.

=head1 AUTHOR

Kevin P. Scannell, E<lt>scannell@slu.eduE<gt>.

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2004 Kevin P. Scannell

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.

=cut
